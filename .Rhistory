string = "gene \"ABC\""
#Note:
print(string) #outputs `"gene \"ABC\""
cat(string)  #outputs gene "ABC"
#Here is a way to use print to get a similar result to cat in this case
print(string, quote=FALSE)
#You can use the \t string to denote a tab
cat("Separated\tby\ttabs")
number1 = 5
number2 = 7
sum = number1 + number2
product = number1 * number2
ratio = number1 / number2
print(number1 + number2)
number1 = 150
number2 = 25
sum = number1 + number2
product = number1 * number2
ratio = number1 / number2
print(number1 + number2)
#This program does some math on two numbers
#ask a user for one number
n1string = readline("What is the first number?\n")
#readline returns a string, so need to convert it to a number
n1 = as.numeric(n1string)
#ask a user for another number
n2string = readline("What is the second number?\n")
vector = c(1,2,3,4)
vector
x = c(1.2,2,54,6)
x
y = c(10,23.4,2,3)
y
# We can multiply two vectors element by element
print(x*y)
# Can also do a dot product of two vectors
x %*% y
#Note: In the console, you don't need to use print()
textvec=c("Patient1","Patient2","Patient3")
textvec
#Not compatible with arithmetic
#print(textvec * 2)  #gives an error
logicvec=c(TRUE,FALSE,TRUE,FALSE)
logicvec
#Can also write:
c(T,F,T,F)
textvec[1]
textvec[3]
#We can also simultaneously access multiple elements
textvec[1:2]
textvec[c(1,1,3,3)]
#The length command
length(textvec)
DNA = "AGTCGACTACGTACGACTGAGATACTGAGCGATCG"
splitVariable = strsplit(DNA, NULL)
splitVariable[[1]]
splitRev = rev(splitVariable[[1]])
paste(splitRev, collapse="")
#test that the result is the same as the original command
paste(rev(strsplit(DNA, NULL)[[1]]), collapse="")
listVariable
numericVector = c(1, 3, 5)
numericVector
#Note: numericVector is just a variable name - we call it numericVector because we define it here to contain numbers, but it could be called any variable name that is allowed.
stringVector = c("abc", "def", "ghi")
stringVector
logicVector = c(T, F, T, F)
logicVector
listVariable = list(numericVector, stringVector, logicVector, 77)
listVariable
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable[[2]][1] = "ACGT"
listVariable[[2]]
listVariable[c(2, 4)]
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable
listVariable[1]  #access first list element
listVariable
listVariable[1]  #access first list element
listVariable[[1]] #access content of first element
listVariable[[1]][2]
listVariable[[2]][1] = "ACGT"
listVariable[[2]][1] = "ACGT"
listVariable[[2]]
listVariable[c(2, 4)]
listVariable = list(numbers=numericVector, strings=stringVector, logic=logicVector, myNum=77)
listVariable
listVariable["numbers"]
listVariable["myNum"]
listVariable[[1]]
listVariable[["numbers"]]
listVariable$numbers  #easiest access method
vector1 = c(1,3,5)
vector1
vector2 = c(20,21,22,23,24,25)
vector2
#Create two 3x3 matrices
arrayVariable = array(c(vector1,vector2), dim = c(3,3,2))
arrayVariable
arrayVariable
#get matrix 1
arrayVariable[,,1]
#get 3rd row of matrix 2
arrayVariable[3,,2]
#get element in row 1, column 3 in matrix 1
arrayVariable[1,3,1]
#get matrix 2
arrayVariable[,,2]
name = c("patient1", "patient2", "patient3")
name
age = c(46, 49, 50)
age
smoker = c(T, F, T)
smoker
patientRecords = data.frame(name, age, smoker)
patientRecords
patientRecords
#Just like matrices
patientRecords[1,] #row 1
patientRecords[,1] #column 1
patientRecords[1,2] #element at row 1, column 2
patientRecords$age
#remember to set the current working directory (ensure Preview->Knit Directory->Current Working Directory)
getwd()
#Read the "gene_condition_source_id.txt" file
dataFrame = read.table("gene_condition_source_id.txt", header=TRUE, sep="\t", fill=TRUE, comment.char = "", quote = "")
#In earlier versions of R, by default data.frame() would create factors for string variable columns
patientRecords = data.frame(name, age, smoker, stringsAsFactors = T)
patientRecords
str(patientRecords)   #Note: "Factor w/ 3 levels"
#Tell data.frame() not to create factors
patientRecords2 = data.frame(name, age, smoker, stringsAsFactors=F)
str(patientRecords2)
protein = "MEEPQSDPSVEPPLSQETFSDLWKLLPENNVLSPLPSQAMDDLMLSPDDIEQWFTEDPGPDEAPRMPEAAPPVAPAPAAPTPAAPAPAPSWPLSSSVPSQKTYQGSYGFRLGFLHSGTAKSVTCTYSPALNKMFCQLAKTCPVQLWVDSTPPPGTRVRAMAIYKQSQHMTEVVRRCPHHERCSDSDGLAPPQHLIRVEGNLRVEYLDDRNTFRHSVVVPYEPPEVGSDCTTIHYNYMCNSSCMGGMNRRPILTIITLEDSSGNLLGRNSFEVRVCACPGRDRRTEEENLRKKGEPHHELPPGSTKRALPNNTSSSPQPKKKPLDGEYFTLQIRGRERFEMFRELNEALELKDAQAGKEPGGSRAHSSHLKSKKGQSTSRHKKLMFKTEGPDSD"
aminoacids = strsplit(protein, split = "")
aminoacids[[1]]
f = factor(aminoacids[[1]])
f
summary(f)
x = 5
if (x > 0) {
print("Positive number")
}
x = -5
if (x > 0) {
print("Positive number")
}
length(gregexpr("g", a)[[1]])
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
recent_grads <- read_csv("recent_grads.csv", col_types = cols())
str_replace(review2, pattern = "enjy", replacement = "enjoy")
[1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
str_replace
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
review2
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
library(tidyverse)
review2 <- "I really enjy codnig in R and wnt to lrn more."
str_replace(review2, pattern = "enjy", replacement = "enjoy")
# output: [1] "I really enjoy codnig in R and wnt to lrn more."
str_replace(review2, pattern = " and wnt to lrn more"), replacement = "")
str_replace(review2, pattern = " and wnt to lrn more", replacement = "")
review3 <- "I want to lrn R, and I definitely wnt to lrn more."
str_replace(review3, pattern = "lrn", replacement = "learn")
review3 <- "I want to lrn R, and I definitely wnt to lrn more."
str_replace_all(review3, pattern = "lrn", replacement = "learn")
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
library(tidyverse)
input_scores <- c("83%", "29%", "76%")
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
output_scores <- map(input_scores, format_score)
third_element <- output_scores[[3]]
third_element
library(tidyverse)
student_scores <- read_csv("scores.csv", col_types = cols())
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores <- student_scores %>%
mutate(
new_math_score = unlist(map(math_score, format_score)),
new_science_score = unlist(map(science_score, format_score))
)
format_score <- function(score) {
fmt_string <- str_replace(score, "%", "")
num <- as.numeric(fmt_string)
return(num)
}
student_scores <- student_scores %>%
mutate(
new_writing_score = map(writing_score, format_score)
)
colnames(student_scores)
student_scores$new_writing_score[1:3]
student_scores <- student_scores %>%
mutate(
new_writing_score = unlist(map(writing_score, format_score))
)
student_scores$new_writing_score
# Two inputs vectors
inputs_first <- 1:5
inputs_second <- 6:10
# Function to vectorize
add_two_values <- function(x, y) {
return(x + y)
}
outputs <- map2(inputs_first, inputs_second, add_two_values)
outputs
# [[1]]
# [1] 7
# [[2]]
# [1] 9
# [[3]]
# [1] 11
# [[4]]
# [1] 13
# [[5]]
# [1] 15
input_score <- 50
add_extra_credit <- function(score, extra_credit) {
if (extra_credit == "None") {
points_to_add <- 0
} else if (extra_credit == "Low") {
points_to_add <- 1
} else {
points_to_add <- 5
}
return(score + points_to_add)
}
no_extra_credit_score <- add_extra_credit(input_score, "None")
low_extra_credit_score <- add_extra_credit(input_score, "Low")
high_extra_credit_score <- add_extra_credit(input_score, "High")
library(devtools)
install_gitlab("medbio/disgenet2r")
library(disgenet2r)
api_key <- "enter your API key here"
Sys.setenv(DISGENET_API_KEY= api_key)
# installation
library(devtools)
install_gitlab("medbio/disgenet2r")
#
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
#
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
query_result
library(httr)
library(jsonlite)
# disgenet
# installation
library(devtools)
install_gitlab("medbio/disgenet2r")
#
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
library(httr)
library(jsonlite)
# Provide your API key
api_key <- "Yb23f2ce1-029b-43de-8050-0df6b1fa14a4"
# Specify the response format: one of 'application/json', 'application/xml', 'application/csv'
resp_format <- "application/json"
# Query the gda endpoint by specifying the following parameters:
# - gene_ncbi_id=351: retrieve disease associated to gene with NCBI ID equal to 351
# - page_number=0: retrieve the first page of results (page number 0)
# and providing your API key (api_key) and the response format (resp_format) as HTTP headers
res <- GET("https://api.disgenet.com/api/v1/gda/summary?gene_ncbi_id=351&page_number=0",
add_headers(.headers = c('Authorization'= api_key,
'accept' = resp_format)))
# If the status code of response is 429, it means you have reached one of your query limits
# You can retrieve the time you need to wait until doing a new query in the response headers
if(res$status_code == 429) {
timetoWait <- res$headers$`x-rate-limit-retry-after-seconds`
print(paste0("You have reached a query limit for your user. Please wait ", timetoWait, " seconds until next query"))
Sys.sleep(timetoWait)
print("Your rate limit is now restored.")
# Repeat your query
res <- GET("http://api.disgenet.com/api/v1/gda/summary?gene_ncbi_id=351&page_number=0",
add_headers(.headers = c('Authorization'= api_key,
'accept' = resp_format)))
}
# Extract the content type of the response and parse the JSON content since we set 'accept:application/json' as HTTP header
http_type(res) # "application/json"
query_result <- fromJSON(rawToChar(res$content))
query_result
setwd("/Users/putriramadani/Documents/KALBE/Disgenet/Learn-Disgenet")
file_path <- "DISEASES_Evidence_GDA_ALL_C0023467.tsv"
# Read the TSV file
disgenet_data <- read.table(file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# View the first few rows
head(disgenet_data)
## Applying code for AML
file_path <- "DISEASES_Evidence_GDA_ALL_C0023467.tsv"
# Read the TSV file
disgenet_data <- read.table(file_path, sep = "\t", header = TRUE, stringsAsFactors = FALSE)
# View the first few rows
head(disgenet_data)
# Explore the data
# Check the column names
colnames(disgenet_data)
# Summary of the dataset
summary(disgenet_data)
# Number of rows and columns
dim(disgenet_data)
# Preview specific columns "GeneSymbol" and "score"
head(disgenet_data$GeneSymbol)
head(disgenet_data$score)
# Preview specific columns "AssociationType" and "Disease"
head(disgenet_data$AssociationType)
head(disgenet_data$Disease)
# Read and analyze
# Filter genes with scores above a threshold (e.g., 0.5)
high_score_genes <- disgenet_data[disgenet_data$score > 0.5, ]
# View filtered data
head(high_score_genes)
# Save filtered results to a new file
write.table(high_score_genes, "filtered_genes.tsv", sep = "\t", row.names = FALSE)
# Read and analyze
# Filter genes with scores above a threshold (e.g., 0.5)
high_score_genes <- disgenet_data[disgenet_data$score > 0.5, ]
# View filtered data
head(high_score_genes)
# Save filtered results to a new file
write.table(high_score_genes, "filtered_genes.tsv", sep = "\t", row.names = FALSE)
# Plot a histogram of scores
hist(disgenet_data$score, breaks = 50, main = "Distribution of Gene-Disease Scores", xlab = "Score")
# Read and analyze
class(disgenet_data$score)
# Install DisGeNET2R from GitHub
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("ibi-group/DisGeNET2R")
# Install DisGeNET2R from GitHub
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("ibi-group/DisGeNET2R")
# Install DisGeNET2R from GitHub
if (!requireNamespace("devtools", quietly = TRUE)) {
install.packages("devtools")
}
devtools::install_github("ibi-group/DisGeNET2R")
library(DisGeNET2R)
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
head(disgenet_data$diseaseUMLSCUI)
head(disgenet_data$diseaseUMLSCUI)
# Query genes associated with a disease using its UMLS ID
res <- disease2gene(
disease = "C0023467",
database = "ALL",          # Search across all databases
score = c(0.3, 1)          # Restrict to strong evidence (score between 0.3 and 1)
)
# View the results
head(res)
# Search for disease information by name
disease_info <- diseaseInfo("Acute Myeloid Leukemia")
# Check the structure of the results
str(res)
# View the top genes
head(res)
head(disgenet_data$diseaseUMLSCUI)
# Query genes associated with a disease using its UMLS ID
res <- disease2gene(
disease = "C0023467",
database = "ALL",          # Search across all databases
score = c(0.3, 1)          # Restrict to strong evidence (score between 0.3 and 1)
)
# View the results
head(res)
# Check the structure of the results
str(res)
# View the top genes
head(res)
res <- disease2gene(
disease = "C0023467",
database = "ALL"
)
res <- disease2gene(
disease = "C0023467",
database = "ALL",
score = c(0, 1)  # Include all scores
)
res <- disease2gene(
disease = "C0023467",
database = "ALL",
score = c(0, 1)  # Include all scores
)
results <- gene2disease( gene = 3953, vocabulary = "ENTREZ",
database = "CURATED")
# Query Disease to Gene Associations
res <- disease2gene(
disease = "C0028754",  # Example: Acute Myeloid Leukemia (verify ID)
database = "ALL",      # Search all databases
score = c(0, 1)        # Include all scores
)
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
head(disgenet_data$diseaseUMLSCUI)
# --- output --- #
# "C0023467" "C0023467" "C0023467" "C0023467" "C0023467" "C0023467"
# -------------- #
# Query Disease to Gene Associations
res <- disease2gene(
disease = "C0028754",  # Acute Myeloid Leukemia
database = "ALL",      # Search all databases
score = c(0, 1)        # Include all scores
)
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
head(disgenet_data$diseaseUMLSCUI)
# --- output --- #
# "C0023467" "C0023467" "C0023467" "C0023467" "C0023467" "C0023467"
# -------------- #
# Query Disease to Gene Associations
res <- disease2gene(
disease = "C0023467",  # Acute Myeloid Leukemia
database = "ALL",      # Search all databases
score = c(0, 1)        # Include all scores
)
library(disgenet2r)
api_key <- "b23f2ce1-029b-43de-8050-0df6b1fa14a4"
Sys.setenv(DISGENET_API_KEY= api_key)
head(disgenet_data$diseaseUMLSCUI)
# --- output --- #
# "C0023467" "C0023467" "C0023467" "C0023467" "C0023467" "C0023467"
# -------------- #
# Query Disease to Gene Associations
res <- disease2gene(
disease = "UMLS_C0023467",  # Acute Myeloid Leukemia
database = "CURATED",      # Search all databases
score = c(0, 1)        # Include all scores
)
# Query Disease to Gene Associations
res <- disease2gene(
disease = "UMLS_C0023467",  # Acute Myeloid Leukemia
database = "CURATED",      # Search curated databases
score = c(0, 1)        # Include scores
)
